# Copyright (c) 2020 Intel Corporation.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version: '3.6'

services:

  ##----Start: EII Base Images -- This Base images must be included for building any EII servcies ----
  ## Define ia_eiibase service
  ia_eiibase:
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.eiibase
      args:
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
        EII_VERSION: ${EII_VERSION}
        HOST_TIME_ZONE: ${HOST_TIME_ZONE}
        GO_VERSION: ${GO_VERSION}
        PYTHON_VERSION: ${PYTHON_VERSION}
    image: ${DOCKER_REGISTRY}ia_eiibase:${EII_VERSION}
    ipc: "none"

  ia_configmgr_agent:
    build:
      context: $PWD/../ConfigMgrAgent
      dockerfile: $PWD/../ConfigMgrAgent/Dockerfile
      args:
        EII_VERSION: ${EII_VERSION}
        EII_USER_NAME: ${EII_USER_NAME}
        EII_UID: ${EII_UID}
        ETCD_VERSION: ${ETCD_VERSION}
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
        PYTHON_VERSION: ${PYTHON_VERSION}
    read_only: false
    image: ${DOCKER_REGISTRY}openedgeinsights/ia_configmgr_agent:${EII_VERSION}
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m
    restart: unless-stopped
    container_name: ia_configmgr_agent
    environment:
      SERVICES: "EtcdUI,ZmqBroker,uwc-common,MQTT,MQTT_Bridge,TCP,RTU,SPARKPLUG-BRIDGE,KPIAPP"
      AppName: "ConfigMgrAgent"
      HOST_IP: $HOST_IP
      HOST_TIME_ZONE: $HOST_TIME_ZONE
      EII_INSTALL_PATH: $EII_INSTALL_PATH
      SOCKET_DIR: $SOCKET_DIR
      TC_DISPATCHER_PATH: $TC_DISPATCHER_PATH
      DEV_MODE: $DEV_MODE
      ETCDCTL_API: 3
      ETCD_HOST: $ETCD_HOST
      ETCD_DATA_DIR: $ETCD_DATA_DIR
      ETCD_CLIENT_PORT: $ETCD_CLIENT_PORT
      ETCD_PEER_PORT: $ETCD_PEER_PORT
      ETCD_NAME: $ETCD_NAME
      ETCDROOT_PASSWORD: $ETCDROOT_PASSWORD
      ETCD_PREFIX: $ETCD_PREFIX
      no_proxy: $eii_no_proxy,0.0.0.0:$ETCD_CLIENT_PORT,0.0.0.0:$ETCD_PEER_PORT
      NO_PROXY: $eii_no_proxy,0.0.0.0:$ETCD_CLIENT_PORT,0.0.0.0:$ETCD_PEER_PORT
    networks:
      - eii
    ports:
      - $ETCD_CLIENT_PORT:$ETCD_CLIENT_PORT
      - $ETCD_PEER_PORT:$ETCD_PEER_PORT
    ipc: "none"
    volumes:
      - ./Certificates:/EII/Certificates:rw
      - ./eii_config.json:/EII/etcd/config/eii_config.json
      - $EII_INSTALL_PATH/data/:$ETCD_DATA_DIR/etcd_capture
      - $EII_INSTALL_PATH:$EII_INSTALL_PATH
      - $EII_INSTALL_PATH/models/:/app/models/
      - $EII_INSTALL_PATH/sockets:$SOCKET_DIR
      - $EII_INSTALL_PATH/data:/data
      - $EII_INSTALL_PATH/tools_output:/tools_output
      - $EII_INSTALL_PATH/saved_images:/saved_images
      - $EII_INSTALL_PATH/rde:/rde
      - $TC_DISPATCHER_PATH:$TC_DISPATCHER_PATH
  ## Define ia_common service
  ia_common:
    depends_on:
    - ia_eiibase
    build:
      context: $PWD/../common
      dockerfile: $PWD/../common/dockerfiles/Dockerfile.common
      args:
        EII_VERSION: ${EII_VERSION}
          # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        CMAKE_INSTALL_PREFIX: ${EII_INSTALL_PATH}        
        RUN_TESTS: "OFF"
        DOCKER_REGISTRY: ${DOCKER_REGISTRY}
    read_only: true
    image: ${DOCKER_REGISTRY}ia_common:${EII_VERSION}
    ipc: "none"

  ##----End: EII Base Images---- -- This Base images must be included for building any EII servcies ----

## uwc_common image
  uwc_test_common:
    depends_on:
    - ia_eiibase
    build:
      context: $PWD/../uwc/uwc_common
      dockerfile: $PWD/../uwc/uwc_common/Dockerfile.common.test
      args:
        EII_VERSION: ${EII_VERSION}
        UWC_VERSION: ${UWC_VERSION}
    read_only: true
    image: ${DOCKER_REGISTRY}uwc_test_common:${UWC_VERSION}
    environment:
      CMAKE_INSTALL_PREFIX: ${EII_INSTALL_PATH}

  ia_etcd_ui:
    depends_on:
      - ia_common
    build:
      context: $PWD/../EtcdUI
      dockerfile: $PWD/../EtcdUI/Dockerfile
      args:
        ETCD_VERSION: ${ETCD_VERSION}
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
        CMAKE_INSTALL_PREFIX: ${EII_INSTALL_PATH}
    read_only: true
    image: ${DOCKER_REGISTRY}openedgeinsights/ia_etcd_ui:${EII_VERSION}
    container_name: ia_etcd_ui
    hostname: ia_etcd_ui
    restart: unless-stopped
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m    
    environment:
      AppName: "EtcdUI"
      DEV_MODE: ${DEV_MODE}
      NGINX_PORT: 7071
      no_proxy: ${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      ETCD_ENDPOINT: "$ETCD_HOST:$ETCD_CLIENT_PORT"
    networks:
      - eii
    volumes:
      - "vol_etcd_keeper:/opt/nginx"
      - ./Certificates/EtcdUI:/run/secrets/EtcdUI:ro
      - ./Certificates/rootca/cacert.pem:/run/secrets/rootca/cacert.pem:ro
    ipc: "none"
    ports:
      - 7071:7071
      - 7070:7070

  ia_zmq_broker:
    depends_on:
      - ia_common
    build:
      context: $PWD/../ZmqBroker
      dockerfile: $PWD/../ZmqBroker/Dockerfile
      args:
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        # set CMAKE_BUILD_TYPE value to "Debug" to generate debug symbols
        CMAKE_BUILD_TYPE: "Release"
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
        CMAKE_INSTALL_PREFIX: ${EII_INSTALL_PATH}
    read_only: true
    image: ${DOCKER_REGISTRY}openedgeinsights/ia_zmq_broker:${EII_VERSION}
    container_name: ia_zmq_broker
    hostname: ia_zmq_broker
    restart: unless-stopped
    security_opt:
    - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m    
    environment:
      AppName: "ZmqBroker"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
    ports:
      - 60514:60514
      - 60515:60515
    networks:
      - eii
    volumes:
      - "vol_eii_socket:${SOCKET_DIR}"
      - ./Certificates/ZmqBroker:/run/secrets/ZmqBroker:ro
      - ./Certificates/rootca/cacert.pem:/run/secrets/rootca/cacert.pem:ro

  mqtt_test_container:
    depends_on:
    - ia_eiibase
    - uwc_test_common
    build:
      context: $PWD/../uwc/MQTT/
      dockerfile: $PWD/../uwc/MQTT/Dockerfile
      args:
        EII_VERSION: ${EII_VERSION}
        UWC_VERSION: ${UWC_VERSION}
        EII_UID: ${EII_UID}
        UBUNTU_IMAGE_VERSION: ${UBUNTU_IMAGE_VERSION}
    image: ${DOCKER_REGISTRY}mqtt_test_container:${UWC_VERSION}
    container_name: mqtt_test_container
    hostname: mqtt_test_container
    read_only: true
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    environment:
      AppName: "MQTT"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy}
    user: ${EII_UID}
    volumes:
      - ./Certificates/mymqttcerts:/run/secrets/mymqttcerts      
      - ./Certificates/rootca:/run/secrets/rootca        
    security_opt:
    - no-new-privileges
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh","-c", "ps -C mosquitto_sub >/dev/null && echo Running || echo Not running; exit 1"]    
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s
    networks:
      - eii
    ports:
      - 11883:11883

  mqtt-bridge-test:
    depends_on:
    - ia_eiibase
    - uwc_test_common
    build:
      context: $PWD/../uwc/mqtt-bridge/
      dockerfile: $PWD/../uwc/mqtt-bridge/Dockerfile_UT
      args:
        EII_VERSION: ${EII_VERSION}
        UWC_VERSION: ${UWC_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        CMAKE_INSTALL_PREFIX: ${EII_INSTALL_PATH}
    image: ${DOCKER_REGISTRY}mqtt-bridge-test:${UWC_VERSION}
    container_name: mqtt-bridge-test
    hostname: mqtt-bridge-test
    #read_only: true
    #privileged: true    
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    environment:
      AppName: "MQTT_Bridge"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      ZMQ_RECV_HWM: "1000"
      MQTT_URL_FOR_EXPORT: "${MQTT_PROTOCOL}://mqtt_container:11883"
      ReadRequest: MQTT_Export_RdReq
      WriteRequest: MQTT_Export_WrReq
      ReadRequest_RT: RT_MQTT_Export_RdReq_RT
      WriteRequest_RT: RT_MQTT_Export_WrReq_RT
      PROFILING_MODE: ${PROFILING_MODE}
      # general topics
      mqtt_SubReadTopic: "/+/+/+/read"
      mqtt_SubWriteTopic: "/+/+/+/write"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    user: ${EII_UID}
    # userns_mode: host
    networks:
      - eii    
  
    volumes:
    - "$PWD/unit_test_reports/mqtt-bridge:/reports/mqtt-bridge"
    - "${EII_INSTALL_PATH}/sockets:${SOCKET_DIR}"
    - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EII_INSTALL_PATH}/container_logs/mqtt-bridge:/opt/intel/app/logs"
    - ./Certificates/MQTT_Bridge:/run/secrets/MQTT_Bridge
    - ./Certificates/rootca:/run/secrets/rootca
    - ./Certificates/mymqttcerts:/run/secrets/mymqttcerts
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh","-c", "ps -C MQTT_Bridge >/dev/null && echo Running || echo Not running; exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s

  modbus-tcp-master-test:
    depends_on:
    - ia_eiibase
    - uwc_test_common
    build:
      context: $PWD/../uwc/modbus-master/
      dockerfile: $PWD/../uwc/modbus-master/Dockerfile_UT
      args:
        EII_VERSION: ${EII_VERSION}
        UWC_VERSION: ${UWC_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
    image: ${DOCKER_REGISTRY}modbus-tcp-master-test:${UWC_VERSION}
    container_name: modbus-tcp-master-test
    hostname: modbus-tcp-master-test
    #read_only: true
    # restart: unless-stopped
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    environment:
      AppName: "TCP"
      ETCD_HOST: ${ETCD_HOST}
      # ETCD_HOST: ${HOST_IP} to be discussed for network mode or not.
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      MY_APP_ID: 1
      CUTOFF_INTERVAL_PERCENTAGE: 90
      PROFILING_MODE: ${PROFILING_MODE}
      NETWORK_TYPE: TCP
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    volumes:
    - "${EII_INSTALL_PATH}/uwc_data:/opt/intel/eii/uwc_data:ro"
    - "${EII_INSTALL_PATH}/sockets:${SOCKET_DIR}:z"
    - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EII_INSTALL_PATH}/container_logs/modbus-tcp-master:/opt/intel/app/logs"
    - ./Certificates/TCP:/run/secrets/TCP
    - ./Certificates/rootca:/run/secrets/rootca
    - "$PWD/unit_test_reports/modbus-tcp-master:/reports/modbus-tcp-master"
    user: ${EII_UID}
    # userns_mode: host
    privileged: true
    networks:
      - eii  
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh", "-c", "ps -C ModbusMaster >/dev/null && echo\
          \ Running || echo Not running; exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s

  modbus-rtu-test-master:
    depends_on:
    - ia_eiibase
    - uwc_test_common
    build:
      context: $PWD/../uwc/modbus-master/
      dockerfile: $PWD/../uwc/modbus-master/Dockerfile_UT_RTU
      args:
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        UWC_VERSION: ${UWC_VERSION}
    image: ${DOCKER_REGISTRY}modbus-rtu-master-test:${UWC_VERSION}
    container_name: modbus-rtu-master-test
    hostname: modbus-rtu-master-test
    #read_only: true
    # restart: unless-stopped
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    environment:
      AppName: "RTU"
      ETCD_HOST: ${ETCD_HOST}
      # ETCD_HOST: ${HOST_IP} to be discussed for network mode or not.
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      MY_APP_ID: 2
      CUTOFF_INTERVAL_PERCENTAGE: 90
      SERIAL_PORT_RETRY_INTERVAL: 1
      PROFILING_MODE: ${PROFILING_MODE}
      NETWORK_TYPE: RTU
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
    networks:
      - eii
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    volumes:
    - "${EII_INSTALL_PATH}/uwc_data:/opt/intel/eii/uwc_data:ro"
    - "${EII_INSTALL_PATH}/sockets:${SOCKET_DIR}:z"
    - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EII_INSTALL_PATH}/container_logs/modbus-rtu-master:/opt/intel/app/logs"
    - ./Certificates/RTU:/run/secrets/RTU
    - ./Certificates/rootca:/run/secrets/rootca  
    - "$PWD/unit_test_reports/modbus-rtu-master:/reports/modbus-rtu-master"        
    user: ${EII_UID}
    # userns_mode: host
    devices:
      - /dev:/dev
    privileged: true
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh", "-c", "ps -C ModbusMaster >/dev/null && echo\
          \ Running || echo Not running; exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s

  sparkplug-bridge-test:
    depends_on:
      - ia_eiibase
      - uwc_test_common
    build:
      context: $PWD/../uwc/sparkplug-bridge/
      dockerfile: $PWD/../uwc/sparkplug-bridge/Dockerfile_UT
      args:
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        BUILD_NUMBER: ${BUILD_NUMBER}
        UWC_VERSION: ${UWC_VERSION}
    image: ${DOCKER_REGISTRY}sparkplug-bridge-test:${UWC_VERSION}
    container_name: sparkplug-bridge-test
    hostname: sparkplug-bridge-test
    restart: unless-stopped
    #read_only: true    
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "SPARKPLUG-BRIDGE"
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      DEVICES_GROUP_LIST_FILE_NAME: "Devices_group_list.yml"
      INTERNAL_MQTT_URL: "${MQTT_PROTOCOL}://mqtt_container:11883"
      NETWORK_TYPE: "ALL"
      TOPIC_SEPARATOR: '-'
      BUILD_NUMBER: ${BUILD_NUMBER}
      PROFILING_MODE: ${PROFILING_MODE}
    logging:
        driver: "json-file"
        options:
            max-file: "3"
            max-size: "10m"
    user: ${EII_UID}
    volumes:
     - "${EII_INSTALL_PATH}/uwc_data:/opt/intel/eii/uwc_data:ro"
     - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
     - "${EII_INSTALL_PATH}/container_logs/sparkplug-bridge:/opt/intel/app/logs"
     - ./Certificates/SPARKPLUG-BRIDGE:/run/secrets/SPARKPLUG-BRIDGE
     - ./Certificates/rootca:/run/secrets/rootca      
     - ./Certificates/mymqttcerts:/run/secrets/mymqttcerts
     - ./Certificates/scada_ext_certs:/run/secrets/scada_ext_certs
     - "${EII_INSTALL_PATH}/sockets:${SOCKET_DIR}"
     - "$PWD/unit_test_reports/sparkplug-bridge:/reports/sparkplug-bridge"
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh","-c", "ps -C SPARKPLUGBRIDGE >/dev/null && echo Running || echo Not running; exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s
    networks:
      - eii      

  kpi-tactic-test:
    depends_on:
      - ia_eiibase
      - uwc_test_common
    build:
      context: $PWD/../uwc/kpi-tactic/
      dockerfile: $PWD/../uwc/kpi-tactic/Dockerfile_UT
      args:
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        BUILD_NUMBER: ${BUILD_NUMBER}
        UWC_VERSION: ${UWC_VERSION}
    image: ${DOCKER_REGISTRY}kpi-tactic-test:${UWC_VERSION}
    container_name: kpi-tactic-test
    hostname: kpi-tactic-test
    #read_only: true
    # restart: unless-stopped
    ulimits:
      rtprio:
        soft: "99" # these are the maximum values of priorites to be used inside the container application
        hard: "99"
    networks:
      - eii
    environment:
      AppName: "KPIAPP"
      ETCD_HOST: ${ETCD_HOST}
      DEV_MODE: ${DEV_MODE}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      Log4cppPropsFile: "/opt/intel/config/log4cpp.properties"
      MQTT_URL: "${MQTT_PROTOCOL}://127.0.0.1:11883"
      KPIAPPConfigFile: "ControlLoopConfig.yml"
      CertType: "zmq"
      BUILD_NUMBER: ${BUILD_NUMBER}
      PROFILING_MODE: ${PROFILING_MODE}
      WriteRequest_RT: "RT_KPIAPP_WrReq_RT"
      WriteRequest: "KPIAPP_WrReq"
    logging:
      driver: "json-file"
      options:
        max-file: "3"
        max-size: "10m"
    user: ${EII_UID}
    volumes:
    - "${EII_INSTALL_PATH}/sockets:${SOCKET_DIR}:z"
    - "${EII_INSTALL_PATH}/uwc_data:/opt/intel/eii/uwc_data:ro"
    - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
    - "${EII_INSTALL_PATH}/container_logs/kpi-tactic:/opt/intel/app/logs"
    - ./Certificates/KPIAPP:/run/secrets/KPIAPP
    - ./Certificates/rootca:/run/secrets/rootca
    - ./Certificates/mymqttcerts:/run/secrets/mymqttcerts  
    - "$PWD/unit_test_reports/kpi-tactic:/reports/kpi-tactics"
    security_opt:
      - no-new-privileges
    healthcheck:
      test: ["CMD-SHELL", "/bin/sh","-c", "ps -C KPIAPP >/dev/null && echo Running || echo Not running; exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 0s

  uwc-util-test:
    depends_on:
      - ia_eiibase
      - uwc_test_common
    build:
      context: $PWD/../uwc/uwc_common/
      dockerfile: $PWD/../uwc/uwc_common/Dockerfile_UT
      args:
        EII_VERSION: ${EII_VERSION}
        EII_UID: ${EII_UID}
        EII_USER_NAME: ${EII_USER_NAME}
        ETCD_HOST: ${ETCD_HOST}
        BUILD_NUMBER: ${BUILD_NUMBER}
        UWC_VERSION: ${UWC_VERSION}
    image: ${DOCKER_REGISTRY}uwc-util-test:${UWC_VERSION}
    container_name: uwc-util-test
    hostname: uwc-util-test
    security_opt:
      - no-new-privileges    
    #read_only: true
    ulimits:
     rtprio:
       soft: "99" # these are the maximum values of priorites to be used inside the container application
       hard: "99"
    environment:
      AppName: "UWCUTIL"
      DEV_MODE: ${DEV_MODE}
      ETCD_HOST: ${ETCD_HOST}
      ETCD_CLIENT_PORT: ${ETCD_CLIENT_PORT}
      ETCD_PREFIX: ${ETCD_PREFIX}
      no_proxy: ${eii_no_proxy},${ETCD_HOST}
      CertType: "zmq"
    user: ${EII_UID}  
    #privileged: true
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      interval: 5m   
    networks:
      - eii
    volumes:
      - "${EII_INSTALL_PATH}/uwc_data:/opt/intel/eii/uwc_data:ro"
      - "vol_uwc_socket:${SOCKET_DIR}:z"
      - "${EII_INSTALL_PATH}/uwc_data/common_config:${EII_INSTALL_PATH}/uwc_data/common_config:ro"
      - "$PWD/unit_test_reports/uwc-util:/reports/uwc-util"

networks:
  eii:
    external:
      name: eii

volumes:
  vol_eii_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EII_INSTALL_PATH}/sockets

  vol_etcd_keeper:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs

  vol_uwc_socket:
    driver: local
    driver_opts:
      type: local
      o: bind
      device: ${EII_INSTALL_PATH}/sockets

